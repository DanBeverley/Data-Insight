name: CI Pipeline

on:
  push:
    branches: [main, develop, dev]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.12'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install black==23.12.1 pylint==3.0.3 mypy==1.7.1

      - name: Run Black formatter check
        run: black --check --line-length 120 .

      - name: Run Pylint
        run: pylint src/ data_scientist_chatbot/ --fail-under=7.0 --disable=C0111,C0103
        continue-on-error: true

  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest==7.4.3 pytest-cov==4.1.0 pytest-mock==3.12.0 pytest-timeout==2.2.0 pytest-asyncio==0.23.8

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            -v \
            -m unit \
            --cov=src \
            --cov=data_scientist_chatbot \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junit-xml=reports/junit.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            htmlcov/
            reports/

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  test-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest==7.4.3 pytest-cov==4.1.0 pytest-mock==3.12.0 pytest-timeout==2.2.0 pytest-asyncio==0.23.8

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:testpass@localhost:5432/testdb
        run: |
          pytest tests/integration/ \
            -v \
            -m integration \
            --cov=src \
            --cov=data_scientist_chatbot \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=reports/integration-junit.xml \
            --maxfail=5

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: reports/integration-junit.xml

  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    strategy:
      matrix:
        scenario: [data_analysis_flow, memory_retention, api_contracts, tool_delegation, web_search_integration, error_edge_cases]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest==7.4.3 pytest-html==4.1.1

      - name: Run E2E scenario - ${{ matrix.scenario }}
        run: |
          pytest tests/e2e/ \
            -v \
            -m e2e \
            -k "${{ matrix.scenario }}" \
            --html=reports/${{ matrix.scenario }}.html \
            --self-contained-html \
            --maxfail=3

      - name: Upload E2E test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-${{ matrix.scenario }}-report
          path: reports/${{ matrix.scenario }}.html

  security-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest==7.4.3

      - name: Run security tests
        run: |
          pytest tests/security/ \
            -v \
            -m security \
            --junit-xml=reports/security-junit.xml

      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: reports/security-junit.xml

  notify-slack:
      runs-on: ubuntu-latest
      needs: [code-quality, unit-tests, integration-tests, e2e-tests, security-tests]
      if: always()
      steps:
        - name: Send Slack notification
          uses: slackapi/slack-github-action@v1.24.0
          with:
            payload: |
              {
                "text": "CI Pipeline Status",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Data-Insight CI Pipeline*\nBranch: `${{ github.ref_name }}`\nCommit: ${{ github.sha }}"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Code Quality:*\n${{ needs.code-quality.result }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Unit Tests:*\n${{ needs.unit-tests.result }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Integration Tests:*\n${{ needs.integration-tests.result }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*E2E Tests:*\n${{ needs.e2e-tests.result }}"
                      }
                    ]
                  }
                ]
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
            SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
